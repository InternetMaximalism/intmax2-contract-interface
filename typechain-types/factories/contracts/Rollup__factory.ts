/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Rollup, RollupInterface } from "../../contracts/Rollup";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "scrollMessenger",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "challenger",
        type: "address",
      },
    ],
    name: "BlockFraudProofSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "prevBlockHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "depositTreeRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "signatureHash",
        type: "bytes32",
      },
    ],
    name: "BlockPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "depositTreeRoot",
        type: "bytes32",
      },
    ],
    name: "DepositsProcessed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "withdrawalRequest",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "withdrawAggregator",
        type: "address",
      },
    ],
    name: "WithdrawRequested",
    type: "event",
  },
  {
    inputs: [],
    name: "_blockBuilderRegistryContract",
    outputs: [
      {
        internalType: "contract IBlockBuilderRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_liquidityContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_scrollMessenger",
    outputs: [
      {
        internalType: "contract IScrollMessenger",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDepositTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastProcessedWithdrawalId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isRegistrationBlock",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "txTreeRoot",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "senderFlags",
        type: "uint128",
      },
      {
        internalType: "bytes32",
        name: "publicKeysHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "accountIdsHash",
        type: "bytes32",
      },
      {
        internalType: "uint256[2]",
        name: "aggregatedPublicKey",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[4]",
        name: "aggregatedSignature",
        type: "uint256[4]",
      },
      {
        internalType: "uint256[4]",
        name: "messagePoint",
        type: "uint256[4]",
      },
    ],
    name: "postBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
        ],
        internalType: "struct IRollup.Withdrawal[]",
        name: "withdrawalRequests",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "publicInputs",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "postWithdrawalRequests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "recipientSaltHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidity.Deposit[]",
        name: "deposits",
        type: "tuple[]",
      },
    ],
    name: "processDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "publicInputs",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "submitBlockFraudProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastProcessedWithdrawId",
        type: "uint256",
      },
    ],
    name: "submitWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidityContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "blockBuilderRegistryContract",
        type: "address",
      },
    ],
    name: "updateDependentContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016e2380380620016e2833981810160405281019062000037919062000128565b62000048816200004f60201b60201c565b506200015a565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060056000801b908060018154018082558091505060019003906000526020600020016000909190919091505550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f082620000c3565b9050919050565b6200010281620000e3565b81146200010e57600080fd5b50565b6000815190506200012281620000f7565b92915050565b600060208284031215620001415762000140620000be565b5b6000620001518482850162000111565b91505092915050565b611578806200016a6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063aa8fc35b11610071578063aa8fc35b14610179578063c9b8e9e214610197578063d2b210a1146101b3578063d6e4602d146101e3578063dcaad428146101ff578063eeedfc051461021d576100b4565b8063045d9610146100b9578063048de2f6146100d757806311f0f60e146100f557806348253b7a1461011157806362cfec5014610141578063892a69401461015d575b600080fd5b6100c161023b565b6040516100ce9190610830565b60405180910390f35b6100df610261565b6040516100ec9190610864565b60405180910390f35b61010f600480360381019061010a91906108bf565b61026b565b005b61012b600480360381019061012691906109f4565b6102f1565b6040516101389190610ac4565b60405180910390f35b61015b60048036038101906101569190610bd1565b6104db565b005b61017760048036038101906101729190610cce565b6105d5565b005b610181610620565b60405161018e9190610d7a565b60405180910390f35b6101b160048036038101906101ac9190610deb565b610644565b005b6101cd60048036038101906101c89190610e9f565b610708565b6040516101da9190610864565b60405180910390f35b6101fd60048036038101906101f89190610ef8565b610736565b005b610207610740565b6040516102149190610f46565b60405180910390f35b610225610766565b6040516102329190610ac4565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a5387a8336040518263ffffffff1660e01b815260040161034e9190610830565b602060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190610f76565b6103ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c590611000565b60405180910390fd5b600089898989898989896040516020016103ef9897969594939291906110e8565b60405160208183030381529060405280519060200120905060058054905091506000600560018461042091906111a9565b81548110610431576104306111dd565b5b9060005260206000200154905060006003549050600561045383838688610770565b90806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff16827fe27163b76905dc373b4ad854ddc9403bbac659c5f1c5191c39e5a7c44574040a8684876040516104c49392919061120c565b60405180910390a350505098975050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f06d2c048787336040518463ffffffff1660e01b815260040161053a93929190611252565b600060405180830381600087803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168763ffffffff167fa2d160ed24716f0240546105d30a2e1efb2d5f23abb041888083bcc20083edd260405160405180910390a4505050505050565b60008060001b9050806003819055507f22ab6afd5caf53c894a7bb125d98ba16962ef2986041d88192b54e81ed84a103816040516106139190610864565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060001b905060005b878790508110156106c657600761068d898984818110610672576106716111dd565b5b9050608002018036038101906106889190611392565b6107a9565b908060018154018082558091505060019003906000526020600020016000909190919091505580806106be906113bf565b91505061064f565b50807f0e3e90af4fd393b8486d674b4f90f884aea927619dbfb8458b4a732d9f7694f0336040516106f79190610830565b60405180910390a250505050505050565b600060058263ffffffff1681548110610724576107236111dd565b5b90600052602060002001549050919050565b8060068190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600654905090565b6000848484846040516020016107899493929190611428565b604051602081830303815290604052805190602001209050949350505050565b600081600001518260200151836040015184606001516040516020016107d294939291906114f4565b604051602081830303815290604052805190602001209050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061081a826107ef565b9050919050565b61082a8161080f565b82525050565b60006020820190506108456000830184610821565b92915050565b6000819050919050565b61085e8161084b565b82525050565b60006020820190506108796000830184610855565b92915050565b6000604051905090565b600080fd5b600080fd5b61089c8161080f565b81146108a757600080fd5b50565b6000813590506108b981610893565b92915050565b600080604083850312156108d6576108d5610889565b5b60006108e4858286016108aa565b92505060206108f5858286016108aa565b9150509250929050565b60008115159050919050565b610914816108ff565b811461091f57600080fd5b50565b6000813590506109318161090b565b92915050565b6109408161084b565b811461094b57600080fd5b50565b60008135905061095d81610937565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61098881610963565b811461099357600080fd5b50565b6000813590506109a58161097f565b92915050565b600080fd5b6000819050826020600202820111156109cc576109cb6109ab565b5b92915050565b6000819050826020600402820111156109ee576109ed6109ab565b5b92915050565b6000806000806000806000806101e0898b031215610a1557610a14610889565b5b6000610a238b828c01610922565b9850506020610a348b828c0161094e565b9750506040610a458b828c01610996565b9650506060610a568b828c0161094e565b9550506080610a678b828c0161094e565b94505060a0610a788b828c016109b0565b93505060e0610a898b828c016109d2565b925050610160610a9b8b828c016109d2565b9150509295985092959890939650565b6000819050919050565b610abe81610aab565b82525050565b6000602082019050610ad96000830184610ab5565b92915050565b600063ffffffff82169050919050565b610af881610adf565b8114610b0357600080fd5b50565b600081359050610b1581610aef565b92915050565b600080fd5b600080fd5b60008083601f840112610b3b57610b3a610b1b565b5b8235905067ffffffffffffffff811115610b5857610b57610b20565b5b602083019150836020820283011115610b7457610b736109ab565b5b9250929050565b60008083601f840112610b9157610b90610b1b565b5b8235905067ffffffffffffffff811115610bae57610bad610b20565b5b602083019150836001820283011115610bca57610bc96109ab565b5b9250929050565b60008060008060008060808789031215610bee57610bed610889565b5b6000610bfc89828a01610b06565b9650506020610c0d89828a016108aa565b955050604087013567ffffffffffffffff811115610c2e57610c2d61088e565b5b610c3a89828a01610b25565b9450945050606087013567ffffffffffffffff811115610c5d57610c5c61088e565b5b610c6989828a01610b7b565b92509250509295509295509295565b60008083601f840112610c8e57610c8d610b1b565b5b8235905067ffffffffffffffff811115610cab57610caa610b20565b5b602083019150836060820283011115610cc757610cc66109ab565b5b9250929050565b60008060208385031215610ce557610ce4610889565b5b600083013567ffffffffffffffff811115610d0357610d0261088e565b5b610d0f85828601610c78565b92509250509250929050565b6000819050919050565b6000610d40610d3b610d36846107ef565b610d1b565b6107ef565b9050919050565b6000610d5282610d25565b9050919050565b6000610d6482610d47565b9050919050565b610d7481610d59565b82525050565b6000602082019050610d8f6000830184610d6b565b92915050565b60008083601f840112610dab57610daa610b1b565b5b8235905067ffffffffffffffff811115610dc857610dc7610b20565b5b602083019150836080820283011115610de457610de36109ab565b5b9250929050565b60008060008060008060608789031215610e0857610e07610889565b5b600087013567ffffffffffffffff811115610e2657610e2561088e565b5b610e3289828a01610d95565b9650965050602087013567ffffffffffffffff811115610e5557610e5461088e565b5b610e6189828a01610b25565b9450945050604087013567ffffffffffffffff811115610e8457610e8361088e565b5b610e9089828a01610b7b565b92509250509295509295509295565b600060208284031215610eb557610eb4610889565b5b6000610ec384828501610b06565b91505092915050565b610ed581610aab565b8114610ee057600080fd5b50565b600081359050610ef281610ecc565b92915050565b600060208284031215610f0e57610f0d610889565b5b6000610f1c84828501610ee3565b91505092915050565b6000610f3082610d47565b9050919050565b610f4081610f25565b82525050565b6000602082019050610f5b6000830184610f37565b92915050565b600081519050610f708161090b565b92915050565b600060208284031215610f8c57610f8b610889565b5b6000610f9a84828501610f61565b91505092915050565b600082825260208201905092915050565b7f426c6f636b206275696c646572206973206e6f742076616c6964000000000000600082015250565b6000610fea601a83610fa3565b9150610ff582610fb4565b602082019050919050565b6000602082019050818103600083015261101981610fdd565b9050919050565b60008160f81b9050919050565b600061103882611020565b9050919050565b600061104a8261102d565b9050919050565b61106261105d826108ff565b61103f565b82525050565b6000819050919050565b61108361107e8261084b565b611068565b82525050565b60008160801b9050919050565b60006110a182611089565b9050919050565b6110b96110b482610963565b611096565b82525050565b82818337505050565b6110d4604083836110bf565b5050565b6110e4608083836110bf565b5050565b60006110f4828b611051565b600182019150611104828a611072565b60208201915061111482896110a8565b6010820191506111248288611072565b6020820191506111348287611072565b60208201915061114482866110c8565b60408201915061115482856110d8565b60808201915061116482846110d8565b6080820191508190509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111b482610aab565b91506111bf83610aab565b92508282039050818111156111d7576111d661117a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006060820190506112216000830186610ab5565b61122e6020830185610855565b61123b6040830184610855565b949350505050565b61124c81610adf565b82525050565b60006060820190506112676000830186611243565b6112746020830185610821565b6112816040830184610821565b949350505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6112d78261128e565b810181811067ffffffffffffffff821117156112f6576112f561129f565b5b80604052505050565b600061130961087f565b905061131582826112ce565b919050565b6000608082840312156113305761132f611289565b5b61133a60806112ff565b9050600061134a848285016108aa565b600083015250602061135e84828501610b06565b602083015250604061137284828501610ee3565b60408301525060606113868482850161094e565b60608301525092915050565b6000608082840312156113a8576113a7610889565b5b60006113b68482850161131a565b91505092915050565b60006113ca82610aab565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113fc576113fb61117a565b5b600182019050919050565b6000819050919050565b61142261141d82610aab565b611407565b82525050565b60006114348287611072565b6020820191506114448286611072565b6020820191506114548285611072565b6020820191506114648284611411565b60208201915081905095945050505050565b60008160601b9050919050565b600061148e82611476565b9050919050565b60006114a082611483565b9050919050565b6114b86114b38261080f565b611495565b82525050565b60008160e01b9050919050565b60006114d6826114be565b9050919050565b6114ee6114e982610adf565b6114cb565b82525050565b600061150082876114a7565b60148201915061151082866114dd565b6004820191506115208285611411565b6020820191506115308284611072565b6020820191508190509594505050505056fea2646970667358221220db1291d0f45835bcaca51ccdddc10f1405c9ec42022779c5fde4896f0600cad564736f6c63430008140033";

type RollupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RollupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rollup__factory extends ContractFactory {
  constructor(...args: RollupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Rollup> {
    return super.deploy(scrollMessenger, overrides || {}) as Promise<Rollup>;
  }
  override getDeployTransaction(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(scrollMessenger, overrides || {});
  }
  override attach(address: string): Rollup {
    return super.attach(address) as Rollup;
  }
  override connect(signer: Signer): Rollup__factory {
    return super.connect(signer) as Rollup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RollupInterface {
    return new utils.Interface(_abi) as RollupInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Rollup {
    return new Contract(address, _abi, signerOrProvider) as Rollup;
  }
}
