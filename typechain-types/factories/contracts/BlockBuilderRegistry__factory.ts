/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BlockBuilderRegistry,
  BlockBuilderRegistryInterface,
} from "../../contracts/BlockBuilderRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "rollupContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "BlockBuilderStoped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "url",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
    ],
    name: "BlockBuilderUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "CHALLENGE_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_STAKE_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "getBlockBuilder",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "blockBuilderUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stopTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numSlashes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isValid",
            type: "bool",
          },
        ],
        internalType: "struct IBlockBuilderRegistry.BlockBuilderInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "isValidBlockBuilder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        internalType: "address",
        name: "challenger",
        type: "address",
      },
    ],
    name: "slashBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
    ],
    name: "updateBlockBuilder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200174a3803806200174a8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b611620806200012a6000396000f3fe60806040526004361061007b5760003560e01c8063513348511161004e578063513348511461011b57806367ab845b146101325780636a5387a81461015d578063f06d2c041461019a5761007b565b80630f36c6381461008057806327ed71881461009c5780632def6620146100c757806333587abf146100de575b600080fd5b61009a60048036038101906100959190610d8f565b6101c3565b005b3480156100a857600080fd5b506100b16103f8565b6040516100be9190610df1565b60405180910390f35b3480156100d357600080fd5b506100dc610400565b005b3480156100ea57600080fd5b5061010560048036038101906101009190610e6a565b610745565b6040516101129190610fb6565b60405180910390f35b34801561012757600080fd5b50610130610869565b005b34801561013e57600080fd5b506101476109d5565b6040516101549190610df1565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190610e6a565b6109da565b6040516101919190610fe7565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc919061103e565b610a33565b005b600034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461021391906110c0565b90506305f5e10081101561025c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025390611151565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816102ab919061137d565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555061034433610b54565b156103a45760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a5440583836040516103ec929190611488565b60405180910390a25050565b6305f5e10081565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015403610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90611504565b60405180910390fd5b6005600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426104d59190611524565b1015610516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050d906115ca565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054610565906111a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610591906111a0565b80156105de5780601f106105b3576101008083540402835291602001916105de565b820191906000526020600020905b8154815290600101906020018083116105c157829003601f168201915b505050505090506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061067c9190610ba7565b6001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106f0573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a544058383604051610739929190611488565b60405180910390a25050565b61074d610be7565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820180546107a7906111a0565b80601f01602080910402602001604051908101604052809291908181526020018280546107d3906111a0565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154036108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e590611504565b60405180910390fd5b42600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f93e5347bfe24301285595924ebe1940d4d0bce1c95b212d44fcf6ec4c0f2c14560405160405180910390a2565b600581565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b60018060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610a8591906110c0565b92505081905550610a9582610b54565b158015610aee5750600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff165b15610b4f576000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b505050565b60006305f5e100600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410159050919050565b508054610bb3906111a0565b6000825580601f10610bc55750610be4565b601f016020900490600052602060002090810190610be39190610c18565b5b50565b6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b5b80821115610c31576000816000905550600101610c19565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9c82610c53565b810181811067ffffffffffffffff82111715610cbb57610cba610c64565b5b80604052505050565b6000610cce610c35565b9050610cda8282610c93565b919050565b600067ffffffffffffffff821115610cfa57610cf9610c64565b5b610d0382610c53565b9050602081019050919050565b82818337600083830152505050565b6000610d32610d2d84610cdf565b610cc4565b905082815260208101848484011115610d4e57610d4d610c4e565b5b610d59848285610d10565b509392505050565b600082601f830112610d7657610d75610c49565b5b8135610d86848260208601610d1f565b91505092915050565b600060208284031215610da557610da4610c3f565b5b600082013567ffffffffffffffff811115610dc357610dc2610c44565b5b610dcf84828501610d61565b91505092915050565b6000819050919050565b610deb81610dd8565b82525050565b6000602082019050610e066000830184610de2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e3782610e0c565b9050919050565b610e4781610e2c565b8114610e5257600080fd5b50565b600081359050610e6481610e3e565b92915050565b600060208284031215610e8057610e7f610c3f565b5b6000610e8e84828501610e55565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ed1578082015181840152602081019050610eb6565b60008484015250505050565b6000610ee882610e97565b610ef28185610ea2565b9350610f02818560208601610eb3565b610f0b81610c53565b840191505092915050565b610f1f81610dd8565b82525050565b60008115159050919050565b610f3a81610f25565b82525050565b600060a0830160008301518482036000860152610f5d8282610edd565b9150506020830151610f726020860182610f16565b506040830151610f856040860182610f16565b506060830151610f986060860182610f16565b506080830151610fab6080860182610f31565b508091505092915050565b60006020820190508181036000830152610fd08184610f40565b905092915050565b610fe181610f25565b82525050565b6000602082019050610ffc6000830184610fd8565b92915050565b600063ffffffff82169050919050565b61101b81611002565b811461102657600080fd5b50565b60008135905061103881611012565b92915050565b60008060006060848603121561105757611056610c3f565b5b600061106586828701611029565b935050602061107686828701610e55565b925050604061108786828701610e55565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110cb82610dd8565b91506110d683610dd8565b92508282019050808211156110ee576110ed611091565b5b92915050565b600082825260208201905092915050565b7f496e73756666696369656e74207374616b6520616d6f756e7400000000000000600082015250565b600061113b6019836110f4565b915061114682611105565b602082019050919050565b6000602082019050818103600083015261116a8161112e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111b857607f821691505b6020821081036111cb576111ca611171565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026112337fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826111f6565b61123d86836111f6565b95508019841693508086168417925050509392505050565b6000819050919050565b600061127a61127561127084610dd8565b611255565b610dd8565b9050919050565b6000819050919050565b6112948361125f565b6112a86112a082611281565b848454611203565b825550505050565b600090565b6112bd6112b0565b6112c881848461128b565b505050565b5b818110156112ec576112e16000826112b5565b6001810190506112ce565b5050565b601f82111561133157611302816111d1565b61130b846111e6565b8101602085101561131a578190505b61132e611326856111e6565b8301826112cd565b50505b505050565b600082821c905092915050565b600061135460001984600802611336565b1980831691505092915050565b600061136d8383611343565b9150826002028217905092915050565b61138682610e97565b67ffffffffffffffff81111561139f5761139e610c64565b5b6113a982546111a0565b6113b48282856112f0565b600060209050601f8311600181146113e757600084156113d5578287015190505b6113df8582611361565b865550611447565b601f1984166113f5866111d1565b60005b8281101561141d578489015182556001820191506020850194506020810190506113f8565b8683101561143a5784890151611436601f891682611343565b8355505b6001600288020188555050505b505050505050565b600061145a82610e97565b61146481856110f4565b9350611474818560208601610eb3565b61147d81610c53565b840191505092915050565b600060408201905081810360008301526114a2818561144f565b90506114b16020830184610de2565b9392505050565b7f426c6f636b206275696c646572206e6f7420666f756e64000000000000000000600082015250565b60006114ee6017836110f4565b91506114f9826114b8565b602082019050919050565b6000602082019050818103600083015261151d816114e1565b9050919050565b600061152f82610dd8565b915061153a83610dd8565b925082820390508181111561155257611551611091565b5b92915050565b7f43616e6e6f7420756e7374616b652077697468696e206f6e6520646179206f6660008201527f20746865206c61737420626c6f636b207375626d697373696f6e000000000000602082015250565b60006115b4603a836110f4565b91506115bf82611558565b604082019050919050565b600060208201905081810360008301526115e3816115a7565b905091905056fea2646970667358221220d23a020f82a3794f05dbcbb3090ca9c406f7911431378df0b04d7787168d62ff64736f6c63430008140033";

type BlockBuilderRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockBuilderRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockBuilderRegistry__factory extends ContractFactory {
  constructor(...args: BlockBuilderRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    rollupContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlockBuilderRegistry> {
    return super.deploy(
      rollupContract,
      overrides || {}
    ) as Promise<BlockBuilderRegistry>;
  }
  override getDeployTransaction(
    rollupContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(rollupContract, overrides || {});
  }
  override attach(address: string): BlockBuilderRegistry {
    return super.attach(address) as BlockBuilderRegistry;
  }
  override connect(signer: Signer): BlockBuilderRegistry__factory {
    return super.connect(signer) as BlockBuilderRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockBuilderRegistryInterface {
    return new utils.Interface(_abi) as BlockBuilderRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockBuilderRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BlockBuilderRegistry;
  }
}
