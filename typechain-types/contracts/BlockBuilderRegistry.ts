/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IBlockBuilderRegistry {
  export type BlockBuilderInfoStruct = {
    blockBuilderUrl: PromiseOrValue<string>;
    stakeAmount: PromiseOrValue<BigNumberish>;
    stopTime: PromiseOrValue<BigNumberish>;
    numSlashes: PromiseOrValue<BigNumberish>;
    isValid: PromiseOrValue<boolean>;
  };

  export type BlockBuilderInfoStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    blockBuilderUrl: string;
    stakeAmount: BigNumber;
    stopTime: BigNumber;
    numSlashes: BigNumber;
    isValid: boolean;
  };
}

export interface BlockBuilderRegistryInterface extends utils.Interface {
  functions: {
    "CHALLENGE_DURATION()": FunctionFragment;
    "MIN_STAKE_AMOUNT()": FunctionFragment;
    "getBlockBuilder(address)": FunctionFragment;
    "isValidBlockBuilder(address)": FunctionFragment;
    "slashBlockBuilder(uint32,address,address)": FunctionFragment;
    "stopBlockBuilder()": FunctionFragment;
    "unstake()": FunctionFragment;
    "updateBlockBuilder(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHALLENGE_DURATION"
      | "MIN_STAKE_AMOUNT"
      | "getBlockBuilder"
      | "isValidBlockBuilder"
      | "slashBlockBuilder"
      | "stopBlockBuilder"
      | "unstake"
      | "updateBlockBuilder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STAKE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockBuilder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidBlockBuilder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "slashBlockBuilder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stopBlockBuilder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBlockBuilder",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STAKE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBlockBuilder",
    data: BytesLike
  ): Result;

  events: {
    "BlockBuilderStoped(address)": EventFragment;
    "BlockBuilderUpdated(address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockBuilderStoped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockBuilderUpdated"): EventFragment;
}

export interface BlockBuilderStopedEventObject {
  blockBuilder: string;
}
export type BlockBuilderStopedEvent = TypedEvent<
  [string],
  BlockBuilderStopedEventObject
>;

export type BlockBuilderStopedEventFilter =
  TypedEventFilter<BlockBuilderStopedEvent>;

export interface BlockBuilderUpdatedEventObject {
  blockBuilder: string;
  url: string;
  stakeAmount: BigNumber;
}
export type BlockBuilderUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  BlockBuilderUpdatedEventObject
>;

export type BlockBuilderUpdatedEventFilter =
  TypedEventFilter<BlockBuilderUpdatedEvent>;

export interface BlockBuilderRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlockBuilderRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHALLENGE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IBlockBuilderRegistry.BlockBuilderInfoStructOutput]>;

    isValidBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    slashBlockBuilder(
      blockNumber: PromiseOrValue<BigNumberish>,
      blockBuilder: PromiseOrValue<string>,
      challenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopBlockBuilder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBlockBuilder(
      url: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CHALLENGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockBuilder(
    blockBuilder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IBlockBuilderRegistry.BlockBuilderInfoStructOutput>;

  isValidBlockBuilder(
    blockBuilder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  slashBlockBuilder(
    blockNumber: PromiseOrValue<BigNumberish>,
    blockBuilder: PromiseOrValue<string>,
    challenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopBlockBuilder(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBlockBuilder(
    url: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHALLENGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IBlockBuilderRegistry.BlockBuilderInfoStructOutput>;

    isValidBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    slashBlockBuilder(
      blockNumber: PromiseOrValue<BigNumberish>,
      blockBuilder: PromiseOrValue<string>,
      challenger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopBlockBuilder(overrides?: CallOverrides): Promise<void>;

    unstake(overrides?: CallOverrides): Promise<void>;

    updateBlockBuilder(
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlockBuilderStoped(address)"(
      blockBuilder?: PromiseOrValue<string> | null
    ): BlockBuilderStopedEventFilter;
    BlockBuilderStoped(
      blockBuilder?: PromiseOrValue<string> | null
    ): BlockBuilderStopedEventFilter;

    "BlockBuilderUpdated(address,string,uint256)"(
      blockBuilder?: PromiseOrValue<string> | null,
      url?: null,
      stakeAmount?: null
    ): BlockBuilderUpdatedEventFilter;
    BlockBuilderUpdated(
      blockBuilder?: PromiseOrValue<string> | null,
      url?: null,
      stakeAmount?: null
    ): BlockBuilderUpdatedEventFilter;
  };

  estimateGas: {
    CHALLENGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    slashBlockBuilder(
      blockNumber: PromiseOrValue<BigNumberish>,
      blockBuilder: PromiseOrValue<string>,
      challenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopBlockBuilder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBlockBuilder(
      url: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHALLENGE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    slashBlockBuilder(
      blockNumber: PromiseOrValue<BigNumberish>,
      blockBuilder: PromiseOrValue<string>,
      challenger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopBlockBuilder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBlockBuilder(
      url: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
