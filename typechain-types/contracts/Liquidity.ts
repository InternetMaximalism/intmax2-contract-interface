/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ILiquidity {
  export type DepositStruct = {
    recipientSaltHash: PromiseOrValue<BytesLike>;
    tokenIndex: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type DepositStructOutput = [string, number, BigNumber] & {
    recipientSaltHash: string;
    tokenIndex: number;
    amount: BigNumber;
  };

  export type DepositDataStruct = {
    depositHash: PromiseOrValue<BytesLike>;
    sender: PromiseOrValue<string>;
    requestedAt: PromiseOrValue<BigNumberish>;
  };

  export type DepositDataStructOutput = [string, string, BigNumber] & {
    depositHash: string;
    sender: string;
    requestedAt: BigNumber;
  };

  export type TokenInfoStruct = {
    tokenType: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
  };

  export type TokenInfoStructOutput = [number, string, BigNumber] & {
    tokenType: number;
    tokenAddress: string;
    tokenId: BigNumber;
  };
}

export declare namespace IRollup {
  export type WithdrawalStruct = {
    recipient: PromiseOrValue<string>;
    tokenIndex: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BytesLike>;
  };

  export type WithdrawalStructOutput = [string, number, BigNumber, string] & {
    recipient: string;
    tokenIndex: number;
    amount: BigNumber;
    salt: string;
  };
}

export interface LiquidityInterface extends utils.Interface {
  functions: {
    "_rollupContract()": FunctionFragment;
    "_scrollMessenger()": FunctionFragment;
    "cancelPendingDeposit(uint256,(bytes32,uint32,uint256))": FunctionFragment;
    "claimRejectedDeposit(uint256,(bytes32,uint32,uint256))": FunctionFragment;
    "claimWithdrawals(uint256[])": FunctionFragment;
    "depositERC1155(address,bytes32,uint256,uint256)": FunctionFragment;
    "depositERC20(address,bytes32,uint256)": FunctionFragment;
    "depositERC721(address,bytes32,uint256)": FunctionFragment;
    "depositETH(bytes32)": FunctionFragment;
    "getDepositCounter()": FunctionFragment;
    "getLastAnalyzedDepositId()": FunctionFragment;
    "getLastProcessedDepositId()": FunctionFragment;
    "getPendingDeposit(uint256)": FunctionFragment;
    "getRejectedDeposit(uint256)": FunctionFragment;
    "getTokenIndex(uint8,address,uint256)": FunctionFragment;
    "getTokenInfo(uint32)": FunctionFragment;
    "processWithdrawals((address,uint32,uint256,bytes32)[])": FunctionFragment;
    "rejectDeposits(uint256,uint256[])": FunctionFragment;
    "submitDeposits(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_rollupContract"
      | "_scrollMessenger"
      | "cancelPendingDeposit"
      | "claimRejectedDeposit"
      | "claimWithdrawals"
      | "depositERC1155"
      | "depositERC20"
      | "depositERC721"
      | "depositETH"
      | "getDepositCounter"
      | "getLastAnalyzedDepositId"
      | "getLastProcessedDepositId"
      | "getPendingDeposit"
      | "getRejectedDeposit"
      | "getTokenIndex"
      | "getTokenInfo"
      | "processWithdrawals"
      | "rejectDeposits"
      | "submitDeposits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_rollupContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_scrollMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPendingDeposit",
    values: [PromiseOrValue<BigNumberish>, ILiquidity.DepositStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRejectedDeposit",
    values: [PromiseOrValue<BigNumberish>, ILiquidity.DepositStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdrawals",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastAnalyzedDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRejectedDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenIndex",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawals",
    values: [IRollup.WithdrawalStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectDeposits",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitDeposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_rollupContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_scrollMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPendingDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRejectedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastAnalyzedDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRejectedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitDeposits",
    data: BytesLike
  ): Result;

  events: {
    "DepositCanceled(uint256)": EventFragment;
    "Deposited(uint256,address,bytes32,uint32,uint256,uint256)": EventFragment;
    "DepositsRejected(uint256)": EventFragment;
    "DepositsSubmitted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsSubmitted"): EventFragment;
}

export interface DepositCanceledEventObject {
  depositId: BigNumber;
}
export type DepositCanceledEvent = TypedEvent<
  [BigNumber],
  DepositCanceledEventObject
>;

export type DepositCanceledEventFilter = TypedEventFilter<DepositCanceledEvent>;

export interface DepositedEventObject {
  depositId: BigNumber;
  sender: string;
  recipientSaltHash: string;
  tokenIndex: number;
  amount: BigNumber;
  requestedAt: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [BigNumber, string, string, number, BigNumber, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface DepositsRejectedEventObject {
  lastAnalyzedDepositId: BigNumber;
}
export type DepositsRejectedEvent = TypedEvent<
  [BigNumber],
  DepositsRejectedEventObject
>;

export type DepositsRejectedEventFilter =
  TypedEventFilter<DepositsRejectedEvent>;

export interface DepositsSubmittedEventObject {
  lastProcessedDepositId: BigNumber;
}
export type DepositsSubmittedEvent = TypedEvent<
  [BigNumber],
  DepositsSubmittedEventObject
>;

export type DepositsSubmittedEventFilter =
  TypedEventFilter<DepositsSubmittedEvent>;

export interface Liquidity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _rollupContract(overrides?: CallOverrides): Promise<[string]>;

    _scrollMessenger(overrides?: CallOverrides): Promise<[string]>;

    cancelPendingDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      deposit: ILiquidity.DepositStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRejectedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      deposit: ILiquidity.DepositStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimWithdrawals(
      withdrawalIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC1155(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC20(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      recipientSaltHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDepositCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastAnalyzedDepositId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastProcessedDepositId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILiquidity.DepositDataStructOutput]>;

    getRejectedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILiquidity.DepositDataStructOutput]>;

    getTokenIndex(
      tokenType: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTokenInfo(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILiquidity.TokenInfoStructOutput]>;

    processWithdrawals(
      withdrawals: IRollup.WithdrawalStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectDeposits(
      lastAnalyzedDepositId: PromiseOrValue<BigNumberish>,
      rejectedDepositIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitDeposits(
      lastProcessedDepositId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _rollupContract(overrides?: CallOverrides): Promise<string>;

  _scrollMessenger(overrides?: CallOverrides): Promise<string>;

  cancelPendingDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    deposit: ILiquidity.DepositStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRejectedDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    deposit: ILiquidity.DepositStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimWithdrawals(
    withdrawalIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC1155(
    tokenAddress: PromiseOrValue<string>,
    recipientSaltHash: PromiseOrValue<BytesLike>,
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC20(
    tokenAddress: PromiseOrValue<string>,
    recipientSaltHash: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721(
    tokenAddress: PromiseOrValue<string>,
    recipientSaltHash: PromiseOrValue<BytesLike>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    recipientSaltHash: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDepositCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getLastAnalyzedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

  getLastProcessedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidity.DepositDataStructOutput>;

  getRejectedDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidity.DepositDataStructOutput>;

  getTokenIndex(
    tokenType: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getTokenInfo(
    tokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidity.TokenInfoStructOutput>;

  processWithdrawals(
    withdrawals: IRollup.WithdrawalStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectDeposits(
    lastAnalyzedDepositId: PromiseOrValue<BigNumberish>,
    rejectedDepositIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitDeposits(
    lastProcessedDepositId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _rollupContract(overrides?: CallOverrides): Promise<string>;

    _scrollMessenger(overrides?: CallOverrides): Promise<string>;

    cancelPendingDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      deposit: ILiquidity.DepositStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRejectedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      deposit: ILiquidity.DepositStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimWithdrawals(
      withdrawalIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC1155(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC721(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(
      recipientSaltHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDepositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getLastAnalyzedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidity.DepositDataStructOutput>;

    getRejectedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidity.DepositDataStructOutput>;

    getTokenIndex(
      tokenType: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getTokenInfo(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidity.TokenInfoStructOutput>;

    processWithdrawals(
      withdrawals: IRollup.WithdrawalStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    rejectDeposits(
      lastAnalyzedDepositId: PromiseOrValue<BigNumberish>,
      rejectedDepositIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitDeposits(
      lastProcessedDepositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositCanceled(uint256)"(
      depositId?: PromiseOrValue<BigNumberish> | null
    ): DepositCanceledEventFilter;
    DepositCanceled(
      depositId?: PromiseOrValue<BigNumberish> | null
    ): DepositCanceledEventFilter;

    "Deposited(uint256,address,bytes32,uint32,uint256,uint256)"(
      depositId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      recipientSaltHash?: null,
      tokenIndex?: null,
      amount?: null,
      requestedAt?: null
    ): DepositedEventFilter;
    Deposited(
      depositId?: PromiseOrValue<BigNumberish> | null,
      sender?: PromiseOrValue<string> | null,
      recipientSaltHash?: null,
      tokenIndex?: null,
      amount?: null,
      requestedAt?: null
    ): DepositedEventFilter;

    "DepositsRejected(uint256)"(
      lastAnalyzedDepositId?: PromiseOrValue<BigNumberish> | null
    ): DepositsRejectedEventFilter;
    DepositsRejected(
      lastAnalyzedDepositId?: PromiseOrValue<BigNumberish> | null
    ): DepositsRejectedEventFilter;

    "DepositsSubmitted(uint256)"(
      lastProcessedDepositId?: PromiseOrValue<BigNumberish> | null
    ): DepositsSubmittedEventFilter;
    DepositsSubmitted(
      lastProcessedDepositId?: PromiseOrValue<BigNumberish> | null
    ): DepositsSubmittedEventFilter;
  };

  estimateGas: {
    _rollupContract(overrides?: CallOverrides): Promise<BigNumber>;

    _scrollMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    cancelPendingDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      deposit: ILiquidity.DepositStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRejectedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      deposit: ILiquidity.DepositStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimWithdrawals(
      withdrawalIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC1155(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC20(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositETH(
      recipientSaltHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDepositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getLastAnalyzedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRejectedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenIndex(
      tokenType: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenInfo(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processWithdrawals(
      withdrawals: IRollup.WithdrawalStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectDeposits(
      lastAnalyzedDepositId: PromiseOrValue<BigNumberish>,
      rejectedDepositIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitDeposits(
      lastProcessedDepositId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _rollupContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _scrollMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelPendingDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      deposit: ILiquidity.DepositStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRejectedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      deposit: ILiquidity.DepositStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimWithdrawals(
      withdrawalIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC1155(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721(
      tokenAddress: PromiseOrValue<string>,
      recipientSaltHash: PromiseOrValue<BytesLike>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      recipientSaltHash: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDepositCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastAnalyzedDepositId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastProcessedDepositId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRejectedDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenIndex(
      tokenType: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenInfo(
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processWithdrawals(
      withdrawals: IRollup.WithdrawalStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectDeposits(
      lastAnalyzedDepositId: PromiseOrValue<BigNumberish>,
      rejectedDepositIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitDeposits(
      lastProcessedDepositId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
